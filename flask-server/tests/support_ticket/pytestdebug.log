versions pytest-8.3.4, python-3.12.4.final.0
invocation_dir=C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket
cwd=C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket
args=('--debug',)

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x000001EBE6B60170>
    pytest_plugin_registered [hook]
        plugin: <Session  exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        plugin_name: session
        manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x000001EBE6B60170>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000001EBE6D069F0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000001EBE6CC4050>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
          plugin_name: 2112699278224
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x000001EBE6B60170>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\mark\\__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=9 _state='suspended' tmpfile=<_io.TextIOWrapper name='<tempfile._TemporaryFileWrapper object at 0x000001EBE608B0B0>' mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=11 _state='suspended' tmpfile=<_io.TextIOWrapper name='<tempfile._TemporaryFileWrapper object at 0x000001EBE6CED970>' mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=7 _state='started' tmpfile=<_io.TextIOWrapper name='nul' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000001EBE6D069F0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000001EBE6CC4050>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x000001EBE6D05F40>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x000001EBE6860A40>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
          plugin_name: 2112699278224
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x000001EBE6B60170>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\mark\\__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=9 _state='suspended' tmpfile=<_io.TextIOWrapper name='<tempfile._TemporaryFileWrapper object at 0x000001EBE608B0B0>' mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=11 _state='suspended' tmpfile=<_io.TextIOWrapper name='<tempfile._TemporaryFileWrapper object at 0x000001EBE6CED970>' mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=7 _state='started' tmpfile=<_io.TextIOWrapper name='nul' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000001EBE6D069F0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000001EBE6CC4050>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x000001EBE6D05F40>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x000001EBE6860A40>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x000001EBE6915190>
          plugin_name: funcmanage
          manager: <_pytest.config.PytestPluginManager object at 0x000001EBE6B0A390>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x000001EBE6B60170>
          start_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket
          startdir: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket
      finish pytest_report_header --> [['rootdir: C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server', 'configfile: pyproject.toml'], ['using: pytest-8.3.4']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\tests\\support_ticket'] [collection]
        pytest_collectstart [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument CollectionArgument(path=WindowsPath('C:/Users/escal/Documents/Dinklebergs-Auction-House/flask-server/tests/support_ticket'), parts=[], module_name=None) [collection]
            pytest_collect_directory [hook]
                path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server
                parent: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> <Dir flask-server> [hook]
            pytest_collectstart [hook]
                collector: <Dir flask-server>
            finish pytest_collectstart --> [] [hook]
            pytest_make_collect_report [hook]
                collector: <Dir flask-server>
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\.env
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\.env
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir flask-server>
                  file_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\.env
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\.env
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\.pytest_cache
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\.pytest_cache
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\.venv
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\.venv
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\__pycache__
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\__pycache__
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\app
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\app
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\app
                  parent: <Dir flask-server>
              finish pytest_collect_directory --> <Package app> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\flask_session
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\flask_session
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\flask_session
                  parent: <Dir flask-server>
              finish pytest_collect_directory --> <Dir flask_session> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\logs
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\logs
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\logs
                  parent: <Dir flask-server>
              finish pytest_collect_directory --> <Dir logs> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\pyproject.toml
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\pyproject.toml
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir flask-server>
                  file_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\pyproject.toml
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\pyproject.toml
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\requirements.txt
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\requirements.txt
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir flask-server>
                  file_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\requirements.txt
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\requirements.txt
              finish pytest_collect_file --> [] [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests
                  parent: <Dir flask-server>
              finish pytest_collect_directory --> <Package tests> [hook]
            finish pytest_make_collect_report --> <CollectReport '.' lenresult=4 outcome='passed'> [hook]
            pytest_collectstart [hook]
                collector: <Package tests>
            finish pytest_collectstart --> [] [hook]
            pytest_make_collect_report [hook]
                collector: <Package tests>
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\__init__.py
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\__init__.py
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Package tests>
                  file_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\__init__.py
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\__init__.py
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\__pycache__
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\__pycache__
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\category
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\category
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\category
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package category> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\chat
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\chat
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\chat
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package chat> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\chat_message
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\chat_message
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\chat_message
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package chat_message> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\delivery
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\delivery
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\delivery
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package delivery> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\listing
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\listing
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\listing
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package listing> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\order
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\order
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\order
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package order> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\profile
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\profile
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\profile
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package profile> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\review
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\review
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\review
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package review> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\session
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\session
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\session
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package session> [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package support_ticket> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\ticket_message
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\ticket_message
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\ticket_message
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package ticket_message> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\transaction
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\transaction
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\transaction
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package transaction> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001EBE6B60170>
                  collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\user
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\user
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\user
                  parent: <Package tests>
              finish pytest_collect_directory --> <Package user> [hook]
            finish pytest_make_collect_report --> <CollectReport 'tests' lenresult=13 outcome='passed'> [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package support_ticket> [collection]
      pytest_collectstart [hook]
          collector: <Package support_ticket>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package support_ticket>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001EBE6B60170>
            collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\__init__.py
            path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package support_ticket>
            file_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\__init__.py
            path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001EBE6B60170>
            collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\__pycache__
            path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001EBE6B60170>
            collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\data_mapper_test.py
            path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\data_mapper_test.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package support_ticket>
            file_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\data_mapper_test.py
            path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\data_mapper_test.py
          pytest_pycollect_makemodule [hook]
              parent: <Package support_ticket>
              module_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\data_mapper_test.py
              path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\data_mapper_test.py
          finish pytest_pycollect_makemodule --> <Module data_mapper_test.py> [hook]
        finish pytest_collect_file --> [<Module data_mapper_test.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001EBE6B60170>
            collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\entity_test.py
            path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\entity_test.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package support_ticket>
            file_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\entity_test.py
            path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\entity_test.py
          pytest_pycollect_makemodule [hook]
              parent: <Package support_ticket>
              module_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\entity_test.py
              path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\entity_test.py
          finish pytest_pycollect_makemodule --> <Module entity_test.py> [hook]
        finish pytest_collect_file --> [<Module entity_test.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001EBE6B60170>
            collection_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\pytestdebug.log
            path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\pytestdebug.log
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package support_ticket>
            file_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\pytestdebug.log
            path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\pytestdebug.log
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/support_ticket' lenresult=2 outcome='passed'> [hook]
    genitems <Module data_mapper_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module data_mapper_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module data_mapper_test.py>
      early skip of rewriting module: tests [assertion]
      find_module called for: tests.support_ticket [assertion]
      find_module called for: tests.support_ticket.data_mapper_test [assertion]
      matched test file 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\tests\\support_ticket\\data_mapper_test.py' [assertion]
      found cached rewritten pyc for C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\data_mapper_test.py [assertion]
      early skip of rewriting module: unittest.mock [assertion]
      early skip of rewriting module: asyncio [assertion]
      early skip of rewriting module: asyncio.base_events [assertion]
      early skip of rewriting module: concurrent [assertion]
      early skip of rewriting module: concurrent.futures [assertion]
      early skip of rewriting module: concurrent.futures._base [assertion]
      early skip of rewriting module: ssl [assertion]
      early skip of rewriting module: _ssl [assertion]
      early skip of rewriting module: asyncio.constants [assertion]
      early skip of rewriting module: asyncio.coroutines [assertion]
      early skip of rewriting module: asyncio.events [assertion]
      early skip of rewriting module: contextvars [assertion]
      early skip of rewriting module: _contextvars [assertion]
      early skip of rewriting module: asyncio.format_helpers [assertion]
      early skip of rewriting module: _asyncio [assertion]
      early skip of rewriting module: asyncio.base_futures [assertion]
      early skip of rewriting module: asyncio.exceptions [assertion]
      early skip of rewriting module: asyncio.base_tasks [assertion]
      early skip of rewriting module: asyncio.futures [assertion]
      early skip of rewriting module: asyncio.protocols [assertion]
      early skip of rewriting module: asyncio.sslproto [assertion]
      early skip of rewriting module: asyncio.transports [assertion]
      early skip of rewriting module: asyncio.log [assertion]
      early skip of rewriting module: asyncio.staggered [assertion]
      early skip of rewriting module: asyncio.locks [assertion]
      early skip of rewriting module: asyncio.mixins [assertion]
      early skip of rewriting module: asyncio.tasks [assertion]
      early skip of rewriting module: asyncio.timeouts [assertion]
      early skip of rewriting module: asyncio.trsock [assertion]
      early skip of rewriting module: asyncio.runners [assertion]
      early skip of rewriting module: asyncio.queues [assertion]
      early skip of rewriting module: asyncio.streams [assertion]
      early skip of rewriting module: asyncio.subprocess [assertion]
      early skip of rewriting module: asyncio.taskgroups [assertion]
      early skip of rewriting module: asyncio.threads [assertion]
      early skip of rewriting module: asyncio.windows_events [assertion]
      early skip of rewriting module: _overlapped [assertion]
      early skip of rewriting module: asyncio.base_subprocess [assertion]
      early skip of rewriting module: asyncio.proactor_events [assertion]
      early skip of rewriting module: asyncio.selector_events [assertion]
      early skip of rewriting module: asyncio.windows_utils [assertion]
      early skip of rewriting module: pkgutil [assertion]
      early skip of rewriting module: app [assertion]
      early skip of rewriting module: gevent [assertion]
      early skip of rewriting module: gevent._config [assertion]
      early skip of rewriting module: gevent._compat [assertion]
      early skip of rewriting module: gevent.libuv [assertion]
      early skip of rewriting module: gevent.libuv.loop [assertion]
      early skip of rewriting module: zope.interface [assertion]
      early skip of rewriting module: zope.interface.interface [assertion]
      early skip of rewriting module: zope.interface.ro [assertion]
      early skip of rewriting module: zope.interface._compat [assertion]
      early skip of rewriting module: zope.interface.exceptions [assertion]
      early skip of rewriting module: zope.interface._zope_interface_coptimizations [assertion]
      early skip of rewriting module: zope.interface.declarations [assertion]
      early skip of rewriting module: zope.interface.interfaces [assertion]
      early skip of rewriting module: gevent.getcurrent [assertion]
      early skip of rewriting module: gevent.libev [assertion]
      early skip of rewriting module: gevent.libev.corecext [assertion]
      early skip of rewriting module: gevent.exceptions [assertion]
      early skip of rewriting module: greenlet [assertion]
      early skip of rewriting module: greenlet._greenlet [assertion]
      early skip of rewriting module: gevent._interfaces [assertion]
      early skip of rewriting module: zope.schema [assertion]
      early skip of rewriting module: gevent._hub_local [assertion]
      early skip of rewriting module: gevent._util [assertion]
      early skip of rewriting module: gevent._gevent_c_hub_local [assertion]
      early skip of rewriting module: gevent._gevent_c_greenlet_primitives [assertion]
      early skip of rewriting module: gevent._hub_primitives [assertion]
      early skip of rewriting module: gevent._greenlet_primitives [assertion]
      early skip of rewriting module: gevent._waiter [assertion]
      early skip of rewriting module: gevent._gevent_c_waiter [assertion]
      early skip of rewriting module: gevent.timeout [assertion]
      early skip of rewriting module: gevent._gevent_c_hub_primitives [assertion]
      early skip of rewriting module: gevent.greenlet [assertion]
      early skip of rewriting module: gevent._tblib [assertion]
      early skip of rewriting module: gevent._gevent_cgreenlet [assertion]
      early skip of rewriting module: gevent._gevent_c_ident [assertion]
      early skip of rewriting module: gevent.hub [assertion]
      early skip of rewriting module: gevent._ident [assertion]
      early skip of rewriting module: gevent.os [assertion]
      early skip of rewriting module: fcntl [assertion]
      early skip of rewriting module: gevent.monkey [assertion]
      early skip of rewriting module: gevent.monkey._errors [assertion]
      early skip of rewriting module: gevent.monkey._util [assertion]
      early skip of rewriting module: gevent.monkey._state [assertion]
      early skip of rewriting module: gevent.monkey.api [assertion]
      early skip of rewriting module: gevent.events [assertion]
      early skip of rewriting module: zope.event [assertion]
      early skip of rewriting module: gevent.monkey._patch_thread_lt313 [assertion]
      early skip of rewriting module: gevent.monkey._patch_thread_common [assertion]
      early skip of rewriting module: gevent.thread [assertion]
      early skip of rewriting module: gevent.lock [assertion]
      early skip of rewriting module: gevent._semaphore [assertion]
      early skip of rewriting module: gevent._abstract_linkable [assertion]
      early skip of rewriting module: gevent._gevent_c_abstract_linkable [assertion]
      early skip of rewriting module: gevent._gevent_c_semaphore [assertion]
      early skip of rewriting module: gevent.local [assertion]
      early skip of rewriting module: gevent._gevent_clocal [assertion]
      early skip of rewriting module: gevent.threading [assertion]
      early skip of rewriting module: gevent.event [assertion]
      early skip of rewriting module: gevent._gevent_cevent [assertion]
      early skip of rewriting module: _threading_local [assertion]
      early skip of rewriting module: gevent.time [assertion]
      early skip of rewriting module: gevent.socket [assertion]
      early skip of rewriting module: gevent._socket3 [assertion]
      early skip of rewriting module: gevent._socketcommon [assertion]
      early skip of rewriting module: gevent.win32util [assertion]
      early skip of rewriting module: win32api [assertion]
      early skip of rewriting module: gevent.select [assertion]
      early skip of rewriting module: gevent.selectors [assertion]
      early skip of rewriting module: gevent.ssl [assertion]
      early skip of rewriting module: gevent.subprocess [assertion]
      early skip of rewriting module: grp [assertion]
      early skip of rewriting module: pwd [assertion]
      early skip of rewriting module: gevent.signal [assertion]
      early skip of rewriting module: gevent.queue [assertion]
      early skip of rewriting module: queue [assertion]
      early skip of rewriting module: _queue [assertion]
      early skip of rewriting module: gevent._gevent_cqueue [assertion]
      early skip of rewriting module: flask [assertion]
      early skip of rewriting module: flask.json [assertion]
      early skip of rewriting module: flask.globals [assertion]
      early skip of rewriting module: werkzeug [assertion]
      early skip of rewriting module: werkzeug.serving [assertion]
      early skip of rewriting module: socketserver [assertion]
      early skip of rewriting module: http [assertion]
      early skip of rewriting module: http.server [assertion]
      early skip of rewriting module: html [assertion]
      early skip of rewriting module: html.entities [assertion]
      early skip of rewriting module: http.client [assertion]
      early skip of rewriting module: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      early skip of rewriting module: mimetypes [assertion]
      early skip of rewriting module: werkzeug._internal [assertion]
      early skip of rewriting module: werkzeug.exceptions [assertion]
      early skip of rewriting module: markupsafe [assertion]
      early skip of rewriting module: markupsafe._speedups [assertion]
      early skip of rewriting module: werkzeug.urls [assertion]
      early skip of rewriting module: werkzeug.datastructures [assertion]
      early skip of rewriting module: werkzeug.datastructures.accept [assertion]
      early skip of rewriting module: werkzeug.datastructures.structures [assertion]
      early skip of rewriting module: werkzeug.datastructures.mixins [assertion]
      early skip of rewriting module: werkzeug.http [assertion]
      early skip of rewriting module: hashlib [assertion]
      early skip of rewriting module: _hashlib [assertion]
      early skip of rewriting module: _blake2 [assertion]
      early skip of rewriting module: urllib.request [assertion]
      early skip of rewriting module: urllib.error [assertion]
      early skip of rewriting module: urllib.response [assertion]
      early skip of rewriting module: nturl2path [assertion]
      early skip of rewriting module: werkzeug.sansio [assertion]
      early skip of rewriting module: werkzeug.sansio.http [assertion]
      early skip of rewriting module: werkzeug.datastructures.auth [assertion]
      early skip of rewriting module: werkzeug.datastructures.cache_control [assertion]
      early skip of rewriting module: werkzeug.datastructures.csp [assertion]
      early skip of rewriting module: werkzeug.datastructures.etag [assertion]
      early skip of rewriting module: werkzeug.datastructures.file_storage [assertion]
      early skip of rewriting module: werkzeug.datastructures.headers [assertion]
      early skip of rewriting module: werkzeug.datastructures.range [assertion]
      early skip of rewriting module: werkzeug.test [assertion]
      early skip of rewriting module: werkzeug.sansio.multipart [assertion]
      early skip of rewriting module: werkzeug.utils [assertion]
      early skip of rewriting module: werkzeug.security [assertion]
      early skip of rewriting module: hmac [assertion]
      early skip of rewriting module: secrets [assertion]
      early skip of rewriting module: werkzeug.wsgi [assertion]
      early skip of rewriting module: werkzeug.sansio.utils [assertion]
      early skip of rewriting module: werkzeug.wrappers [assertion]
      early skip of rewriting module: werkzeug.wrappers.request [assertion]
      early skip of rewriting module: werkzeug.formparser [assertion]
      early skip of rewriting module: werkzeug.sansio.request [assertion]
      early skip of rewriting module: werkzeug.user_agent [assertion]
      early skip of rewriting module: werkzeug.wrappers.response [assertion]
      early skip of rewriting module: werkzeug.sansio.response [assertion]
      early skip of rewriting module: werkzeug.local [assertion]
      early skip of rewriting module: flask.json.provider [assertion]
      early skip of rewriting module: flask.app [assertion]
      early skip of rewriting module: click [assertion]
      early skip of rewriting module: click.core [assertion]
      early skip of rewriting module: click.types [assertion]
      early skip of rewriting module: click._compat [assertion]
      early skip of rewriting module: click._winconsole [assertion]
      early skip of rewriting module: click.exceptions [assertion]
      early skip of rewriting module: click.globals [assertion]
      early skip of rewriting module: click.utils [assertion]
      early skip of rewriting module: click.formatting [assertion]
      early skip of rewriting module: click.parser [assertion]
      early skip of rewriting module: click.termui [assertion]
      early skip of rewriting module: click.decorators [assertion]
      early skip of rewriting module: werkzeug.routing [assertion]
      early skip of rewriting module: werkzeug.routing.converters [assertion]
      early skip of rewriting module: werkzeug.routing.exceptions [assertion]
      early skip of rewriting module: werkzeug.routing.map [assertion]
      early skip of rewriting module: werkzeug.routing.matcher [assertion]
      early skip of rewriting module: werkzeug.routing.rules [assertion]
      early skip of rewriting module: flask.cli [assertion]
      early skip of rewriting module: flask.helpers [assertion]
      early skip of rewriting module: flask.signals [assertion]
      early skip of rewriting module: blinker [assertion]
      early skip of rewriting module: blinker.base [assertion]
      early skip of rewriting module: blinker._utilities [assertion]
      early skip of rewriting module: flask.typing [assertion]
      early skip of rewriting module: flask.ctx [assertion]
      early skip of rewriting module: flask.sansio [assertion]
      early skip of rewriting module: flask.sansio.app [assertion]
      early skip of rewriting module: flask.config [assertion]
      early skip of rewriting module: flask.logging [assertion]
      early skip of rewriting module: flask.templating [assertion]
      early skip of rewriting module: jinja2 [assertion]
      early skip of rewriting module: jinja2.bccache [assertion]
      early skip of rewriting module: pickle [assertion]
      early skip of rewriting module: _compat_pickle [assertion]
      early skip of rewriting module: _pickle [assertion]
      early skip of rewriting module: jinja2.environment [assertion]
      early skip of rewriting module: jinja2.nodes [assertion]
      early skip of rewriting module: jinja2.utils [assertion]
      early skip of rewriting module: jinja2.compiler [assertion]
      early skip of rewriting module: jinja2.exceptions [assertion]
      early skip of rewriting module: jinja2.idtracking [assertion]
      early skip of rewriting module: jinja2.visitor [assertion]
      early skip of rewriting module: jinja2.optimizer [assertion]
      early skip of rewriting module: jinja2.defaults [assertion]
      early skip of rewriting module: jinja2.filters [assertion]
      early skip of rewriting module: jinja2.async_utils [assertion]
      early skip of rewriting module: jinja2.runtime [assertion]
      early skip of rewriting module: jinja2.tests [assertion]
      early skip of rewriting module: jinja2.lexer [assertion]
      early skip of rewriting module: jinja2._identifier [assertion]
      early skip of rewriting module: jinja2.parser [assertion]
      early skip of rewriting module: jinja2.loaders [assertion]
      early skip of rewriting module: flask.sansio.scaffold [assertion]
      early skip of rewriting module: flask.sessions [assertion]
      early skip of rewriting module: itsdangerous [assertion]
      early skip of rewriting module: itsdangerous.encoding [assertion]
      early skip of rewriting module: itsdangerous.exc [assertion]
      early skip of rewriting module: itsdangerous.serializer [assertion]
      early skip of rewriting module: itsdangerous.signer [assertion]
      early skip of rewriting module: itsdangerous.timed [assertion]
      early skip of rewriting module: itsdangerous.url_safe [assertion]
      early skip of rewriting module: itsdangerous._json [assertion]
      early skip of rewriting module: flask.json.tag [assertion]
      early skip of rewriting module: flask.wrappers [assertion]
      early skip of rewriting module: flask.blueprints [assertion]
      early skip of rewriting module: flask.sansio.blueprints [assertion]
      early skip of rewriting module: flask_cors [assertion]
      early skip of rewriting module: flask_cors.decorator [assertion]
      early skip of rewriting module: flask_cors.core [assertion]
      early skip of rewriting module: flask_cors.extension [assertion]
      early skip of rewriting module: flask_cors.version [assertion]
      early skip of rewriting module: dotenv [assertion]
      early skip of rewriting module: dotenv.main [assertion]
      early skip of rewriting module: dotenv.parser [assertion]
      early skip of rewriting module: dotenv.variables [assertion]
      early skip of rewriting module: app.utils [assertion]
      early skip of rewriting module: app.utils.limiter [assertion]
      early skip of rewriting module: flask_limiter [assertion]
      early skip of rewriting module: flask_limiter._version [assertion]
      early skip of rewriting module: flask_limiter.constants [assertion]
      early skip of rewriting module: flask_limiter.errors [assertion]
      early skip of rewriting module: flask_limiter.typing [assertion]
      early skip of rewriting module: typing_extensions [assertion]
      early skip of rewriting module: flask_limiter.wrappers [assertion]
      early skip of rewriting module: limits [assertion]
      early skip of rewriting module: limits._version [assertion]
      early skip of rewriting module: limits.aio [assertion]
      early skip of rewriting module: limits.aio.storage [assertion]
      early skip of rewriting module: limits.aio.storage.base [assertion]
      early skip of rewriting module: deprecated [assertion]
      early skip of rewriting module: deprecated.classic [assertion]
      early skip of rewriting module: wrapt [assertion]
      early skip of rewriting module: wrapt.__wrapt__ [assertion]
      early skip of rewriting module: wrapt.wrappers [assertion]
      early skip of rewriting module: wrapt._wrappers [assertion]
      early skip of rewriting module: wrapt.patches [assertion]
      early skip of rewriting module: wrapt.weakrefs [assertion]
      early skip of rewriting module: wrapt.decorators [assertion]
      early skip of rewriting module: wrapt.arguments [assertion]
      early skip of rewriting module: wrapt.importer [assertion]
      early skip of rewriting module: deprecated.sphinx [assertion]
      early skip of rewriting module: limits.errors [assertion]
      early skip of rewriting module: limits.storage [assertion]
      early skip of rewriting module: limits.storage.base [assertion]
      early skip of rewriting module: limits.storage.registry [assertion]
      early skip of rewriting module: limits.typing [assertion]
      early skip of rewriting module: limits.util [assertion]
      early skip of rewriting module: packaging [assertion]
      early skip of rewriting module: packaging.version [assertion]
      early skip of rewriting module: packaging._structures [assertion]
      early skip of rewriting module: limits.limits [assertion]
      early skip of rewriting module: limits.storage.etcd [assertion]
      early skip of rewriting module: limits.storage.memcached [assertion]
      early skip of rewriting module: limits.storage.memory [assertion]
      early skip of rewriting module: limits.storage.mongodb [assertion]
      early skip of rewriting module: limits.storage.redis [assertion]
      early skip of rewriting module: importlib.readers [assertion]
      early skip of rewriting module: importlib.resources.readers [assertion]
      early skip of rewriting module: importlib.resources._itertools [assertion]
      early skip of rewriting module: limits.storage.redis_cluster [assertion]
      early skip of rewriting module: limits.storage.redis_sentinel [assertion]
      early skip of rewriting module: limits.aio.storage.etcd [assertion]
      early skip of rewriting module: limits.aio.storage.memcached [assertion]
      early skip of rewriting module: limits.aio.storage.memory [assertion]
      early skip of rewriting module: limits.aio.storage.mongodb [assertion]
      early skip of rewriting module: limits.aio.storage.redis [assertion]
      early skip of rewriting module: limits.aio.strategies [assertion]
      early skip of rewriting module: limits.strategies [assertion]
      early skip of rewriting module: flask_limiter.extension [assertion]
      early skip of rewriting module: ordered_set [assertion]
      early skip of rewriting module: flask_limiter._compat [assertion]
      early skip of rewriting module: flask_limiter.manager [assertion]
      early skip of rewriting module: flask_limiter.util [assertion]
      early skip of rewriting module: app.utils.session [assertion]
      early skip of rewriting module: flask_session [assertion]
      early skip of rewriting module: flask_session.defaults [assertion]
      early skip of rewriting module: app.utils.login_manager [assertion]
      early skip of rewriting module: flask_login [assertion]
      early skip of rewriting module: flask_login.__about__ [assertion]
      early skip of rewriting module: flask_login.config [assertion]
      early skip of rewriting module: flask_login.login_manager [assertion]
      early skip of rewriting module: flask_login.mixins [assertion]
      early skip of rewriting module: flask_login.signals [assertion]
      early skip of rewriting module: flask_login.utils [assertion]
      find_module called for: flask_login.test_client [assertion]
      matched test file 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\flask_login\\test_client.py' [assertion]
      found cached rewritten pyc for C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\.venv\Lib\site-packages\flask_login\test_client.py [assertion]
      early skip of rewriting module: flask.testing [assertion]
      early skip of rewriting module: click.testing [assertion]
      early skip of rewriting module: app.data_mappers [assertion]
      early skip of rewriting module: app.data_mappers.auth_mapper [assertion]
      early skip of rewriting module: pymysql [assertion]
      early skip of rewriting module: pymysql.constants [assertion]
      early skip of rewriting module: pymysql.constants.FIELD_TYPE [assertion]
      early skip of rewriting module: pymysql.err [assertion]
      early skip of rewriting module: pymysql.constants.ER [assertion]
      early skip of rewriting module: pymysql.times [assertion]
      early skip of rewriting module: pymysql.connections [assertion]
      early skip of rewriting module: pymysql._auth [assertion]
      early skip of rewriting module: cryptography [assertion]
      early skip of rewriting module: cryptography.utils [assertion]
      early skip of rewriting module: cryptography.__about__ [assertion]
      early skip of rewriting module: cryptography.hazmat [assertion]
      early skip of rewriting module: cryptography.hazmat.backends [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.serialization [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._serialization [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.hashes [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings._rust [assertion]
      early skip of rewriting module: _cffi_backend [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.serialization.base [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.serialization.ssh [assertion]
      early skip of rewriting module: cryptography.exceptions [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.dsa [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.utils [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ec [assertion]
      early skip of rewriting module: cryptography.hazmat._oid [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ed25519 [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.padding [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._asymmetric [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.rsa [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._cipheralgorithm [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.base [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.modes [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.algorithms [assertion]
      early skip of rewriting module: cryptography.hazmat.decrepit [assertion]
      early skip of rewriting module: cryptography.hazmat.decrepit.ciphers [assertion]
      early skip of rewriting module: cryptography.hazmat.decrepit.ciphers.algorithms [assertion]
      early skip of rewriting module: bcrypt [assertion]
      early skip of rewriting module: pymysql.charset [assertion]
      early skip of rewriting module: pymysql.constants.CLIENT [assertion]
      early skip of rewriting module: pymysql.constants.COMMAND [assertion]
      early skip of rewriting module: pymysql.constants.CR [assertion]
      early skip of rewriting module: pymysql.constants.SERVER_STATUS [assertion]
      early skip of rewriting module: pymysql.converters [assertion]
      early skip of rewriting module: pymysql.cursors [assertion]
      early skip of rewriting module: pymysql.optionfile [assertion]
      early skip of rewriting module: configparser [assertion]
      early skip of rewriting module: pymysql.protocol [assertion]
      early skip of rewriting module: getpass [assertion]
      early skip of rewriting module: termios [assertion]
      early skip of rewriting module: app.database [assertion]
      early skip of rewriting module: app.database.connection [assertion]
      early skip of rewriting module: mysql [assertion]
      early skip of rewriting module: mysql.connector [assertion]
      early skip of rewriting module: mysql.connector.connection_cext [assertion]
      early skip of rewriting module: mysql.connector.version [assertion]
      early skip of rewriting module: mysql.connector._decorating [assertion]
      early skip of rewriting module: mysql.connector.constants [assertion]
      early skip of rewriting module: mysql.connector.charsets [assertion]
      early skip of rewriting module: mysql.connector.errors [assertion]
      early skip of rewriting module: mysql.connector.locales [assertion]
      early skip of rewriting module: mysql.connector.errorcode [assertion]
      early skip of rewriting module: mysql.connector.types [assertion]
      early skip of rewriting module: mysql.connector.utils [assertion]
      early skip of rewriting module: stringprep [assertion]
      early skip of rewriting module: mysql.connector.custom_types [assertion]
      early skip of rewriting module: mysql.connector.tls_ciphers [assertion]
      early skip of rewriting module: mysql.connector.abstracts [assertion]
      early skip of rewriting module: mysql.connector.conversion [assertion]
      early skip of rewriting module: array [assertion]
      early skip of rewriting module: mysql.connector.opentelemetry [assertion]
      early skip of rewriting module: mysql.connector.opentelemetry.constants [assertion]
      early skip of rewriting module: opentelemetry [assertion]
      early skip of rewriting module: mysql.connector.optionfiles [assertion]
      early skip of rewriting module: mysql.connector.protocol [assertion]
      early skip of rewriting module: mysql.connector.logger [assertion]
      early skip of rewriting module: mysql.connector.plugins [assertion]
      early skip of rewriting module: mysql.connector.plugins.caching_sha2_password [assertion]
      early skip of rewriting module: _mysql_connector [assertion]
      early skip of rewriting module: mysql.connector.cursor_cext [assertion]
      early skip of rewriting module: mysql.connector._scripting [assertion]
      early skip of rewriting module: mysql.connector.cursor [assertion]
      early skip of rewriting module: mysql.connector.opentelemetry.context_propagation [assertion]
      early skip of rewriting module: mysql.connector.connection [assertion]
      early skip of rewriting module: mysql.connector.authentication [assertion]
      early skip of rewriting module: mysql.connector.network [assertion]
      early skip of rewriting module: mysql.connector.dbapi [assertion]
      early skip of rewriting module: mysql.connector.pooling [assertion]
      early skip of rewriting module: dns [assertion]
      early skip of rewriting module: app.utils.mysql [assertion]
      early skip of rewriting module: flaskext.mysql [assertion]
      early skip of rewriting module: app.database.backup [assertion]
      early skip of rewriting module: app.entities [assertion]
      early skip of rewriting module: app.entities.bid [assertion]
      early skip of rewriting module: app.entities.category [assertion]
      early skip of rewriting module: app.entities.chat [assertion]
      early skip of rewriting module: app.entities.chat_message [assertion]
      early skip of rewriting module: app.entities.chats [assertion]
      early skip of rewriting module: app.entities.delivery [assertion]
      early skip of rewriting module: app.entities.list [assertion]
      early skip of rewriting module: app.entities.list_item [assertion]
      early skip of rewriting module: app.entities.listing [assertion]
      early skip of rewriting module: app.entities.model [assertion]
      early skip of rewriting module: app.entities.order [assertion]
      early skip of rewriting module: app.entities.order_item [assertion]
      early skip of rewriting module: app.entities.profile [assertion]
      early skip of rewriting module: app.entities.review [assertion]
      early skip of rewriting module: app.entities.session [assertion]
      find_module called for: app.entities.support_ticket [assertion]
      early skip of rewriting module: app.entities.ticket_message [assertion]
      early skip of rewriting module: app.entities.transaction [assertion]
      early skip of rewriting module: app.entities.user [assertion]
      early skip of rewriting module: app.data_mappers.bid_mapper [assertion]
      early skip of rewriting module: app.data_mappers.category_mapper [assertion]
      early skip of rewriting module: app.data_mappers.chat_mapper [assertion]
      early skip of rewriting module: app.data_mappers.chat_message_mapper [assertion]
      early skip of rewriting module: app.data_mappers.delivery_mapper [assertion]
      early skip of rewriting module: app.data_mappers.list_mapper [assertion]
      early skip of rewriting module: app.data_mappers.listing_mapper [assertion]
      early skip of rewriting module: app.data_mappers.model_mapper [assertion]
      early skip of rewriting module: app.data_mappers.order_mapper [assertion]
      early skip of rewriting module: app.data_mappers.profile_mapper [assertion]
      early skip of rewriting module: app.data_mappers.review_mapper [assertion]
      early skip of rewriting module: app.data_mappers.session_mapper [assertion]
      early skip of rewriting module: app.data_mappers.support_ticket_mapper [assertion]
      early skip of rewriting module: app.data_mappers.ticket_message_mapper [assertion]
      early skip of rewriting module: app.data_mappers.transaction_mapper [assertion]
      early skip of rewriting module: app.data_mappers.user_mapper [assertion]
      early skip of rewriting module: app.utils.scheduler [assertion]
      early skip of rewriting module: apscheduler [assertion]
      early skip of rewriting module: apscheduler.schedulers [assertion]
      early skip of rewriting module: apscheduler.schedulers.background [assertion]
      early skip of rewriting module: apscheduler.schedulers.base [assertion]
      early skip of rewriting module: tzlocal [assertion]
      early skip of rewriting module: tzlocal.win32 [assertion]
      early skip of rewriting module: _winreg [assertion]
      early skip of rewriting module: zoneinfo [assertion]
      early skip of rewriting module: zoneinfo._tzpath [assertion]
      early skip of rewriting module: sysconfig [assertion]
      early skip of rewriting module: zoneinfo._common [assertion]
      early skip of rewriting module: _zoneinfo [assertion]
      early skip of rewriting module: tzlocal.utils [assertion]
      early skip of rewriting module: tzlocal.windows_tz [assertion]
      early skip of rewriting module: apscheduler.events [assertion]
      early skip of rewriting module: apscheduler.executors [assertion]
      early skip of rewriting module: apscheduler.executors.base [assertion]
      early skip of rewriting module: apscheduler.executors.pool [assertion]
      early skip of rewriting module: multiprocessing [assertion]
      early skip of rewriting module: multiprocessing.context [assertion]
      early skip of rewriting module: multiprocessing.process [assertion]
      early skip of rewriting module: multiprocessing.reduction [assertion]
      early skip of rewriting module: concurrent.futures.process [assertion]
      early skip of rewriting module: multiprocessing.connection [assertion]
      early skip of rewriting module: _multiprocessing [assertion]
      early skip of rewriting module: multiprocessing.util [assertion]
      early skip of rewriting module: multiprocessing.queues [assertion]
      early skip of rewriting module: apscheduler.job [assertion]
      early skip of rewriting module: apscheduler.triggers [assertion]
      early skip of rewriting module: apscheduler.triggers.base [assertion]
      early skip of rewriting module: apscheduler.util [assertion]
      early skip of rewriting module: apscheduler.jobstores [assertion]
      early skip of rewriting module: apscheduler.jobstores.base [assertion]
      early skip of rewriting module: apscheduler.jobstores.memory [assertion]
      early skip of rewriting module: apscheduler.schedulers.blocking [assertion]
      early skip of rewriting module: tzdata [assertion]
      early skip of rewriting module: tzdata.zoneinfo [assertion]
      early skip of rewriting module: tzdata.zoneinfo.America [assertion]
      early skip of rewriting module: apscheduler.triggers.cron [assertion]
      early skip of rewriting module: apscheduler.triggers.cron.fields [assertion]
      early skip of rewriting module: apscheduler.triggers.cron.expressions [assertion]
      early skip of rewriting module: app.utils.socketio [assertion]
      early skip of rewriting module: flask_socketio [assertion]
      early skip of rewriting module: socketio [assertion]
      early skip of rewriting module: socketio.client [assertion]
      early skip of rewriting module: engineio [assertion]
      early skip of rewriting module: engineio.client [assertion]
      early skip of rewriting module: engineio.json [assertion]
      early skip of rewriting module: requests [assertion]
      early skip of rewriting module: urllib3 [assertion]
      early skip of rewriting module: urllib3.exceptions [assertion]
      early skip of rewriting module: urllib3._base_connection [assertion]
      early skip of rewriting module: urllib3.util [assertion]
      early skip of rewriting module: urllib3.util.connection [assertion]
      early skip of rewriting module: urllib3.util.timeout [assertion]
      early skip of rewriting module: gevent.libuv.loop [assertion]
      early skip of rewriting module: gevent._ffi [assertion]
      early skip of rewriting module: gevent._ffi.loop [assertion]
      early skip of rewriting module: gevent._ffi.callback [assertion]
      early skip of rewriting module: gevent.libuv._corecffi [assertion]
      early skip of rewriting module: gevent.libuv.watcher [assertion]
      early skip of rewriting module: gevent._ffi.watcher [assertion]
      early skip of rewriting module: tracemalloc [assertion]
      early skip of rewriting module: _tracemalloc [assertion]
      early skip of rewriting module: urllib3.util.request [assertion]
      early skip of rewriting module: urllib3.util.util [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: urllib3.util.response [assertion]
      early skip of rewriting module: urllib3.util.retry [assertion]
      early skip of rewriting module: urllib3.util.ssl_ [assertion]
      early skip of rewriting module: urllib3.util.url [assertion]
      early skip of rewriting module: urllib3.util.ssltransport [assertion]
      early skip of rewriting module: urllib3.util.wait [assertion]
      early skip of rewriting module: urllib3._collections [assertion]
      early skip of rewriting module: urllib3._version [assertion]
      early skip of rewriting module: urllib3.connectionpool [assertion]
      early skip of rewriting module: urllib3._request_methods [assertion]
      early skip of rewriting module: urllib3.filepost [assertion]
      early skip of rewriting module: urllib3.fields [assertion]
      early skip of rewriting module: urllib3.response [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: urllib3.connection [assertion]
      early skip of rewriting module: urllib3.http2 [assertion]
      early skip of rewriting module: urllib3.http2.probe [assertion]
      early skip of rewriting module: urllib3.util.ssl_match_hostname [assertion]
      early skip of rewriting module: urllib3.util.proxy [assertion]
      early skip of rewriting module: urllib3.poolmanager [assertion]
      early skip of rewriting module: requests.exceptions [assertion]
      early skip of rewriting module: requests.compat [assertion]
      early skip of rewriting module: chardet [assertion]
      early skip of rewriting module: charset_normalizer [assertion]
      early skip of rewriting module: charset_normalizer.api [assertion]
      early skip of rewriting module: charset_normalizer.cd [assertion]
      early skip of rewriting module: charset_normalizer.constant [assertion]
      early skip of rewriting module: charset_normalizer.md [assertion]
      early skip of rewriting module: charset_normalizer.md__mypyc [assertion]
      early skip of rewriting module: charset_normalizer.utils [assertion]
      early skip of rewriting module: _multibytecodec [assertion]
      early skip of rewriting module: charset_normalizer.models [assertion]
      early skip of rewriting module: charset_normalizer.legacy [assertion]
      early skip of rewriting module: charset_normalizer.version [assertion]
      early skip of rewriting module: simplejson [assertion]
      early skip of rewriting module: http.cookiejar [assertion]
      early skip of rewriting module: http.cookies [assertion]
      early skip of rewriting module: chardet [assertion]
      early skip of rewriting module: requests.packages [assertion]
      early skip of rewriting module: idna [assertion]
      early skip of rewriting module: idna.core [assertion]
      early skip of rewriting module: idna.idnadata [assertion]
      early skip of rewriting module: idna.intranges [assertion]
      early skip of rewriting module: idna.package_data [assertion]
      early skip of rewriting module: requests.utils [assertion]
      early skip of rewriting module: requests.certs [assertion]
      early skip of rewriting module: certifi [assertion]
      early skip of rewriting module: certifi.core [assertion]
      early skip of rewriting module: requests.__version__ [assertion]
      early skip of rewriting module: requests._internal_utils [assertion]
      early skip of rewriting module: requests.cookies [assertion]
      early skip of rewriting module: requests.structures [assertion]
      early skip of rewriting module: requests.api [assertion]
      early skip of rewriting module: requests.sessions [assertion]
      early skip of rewriting module: requests.adapters [assertion]
      early skip of rewriting module: requests.auth [assertion]
      early skip of rewriting module: requests.models [assertion]
      early skip of rewriting module: encodings.idna [assertion]
      early skip of rewriting module: requests.hooks [assertion]
      early skip of rewriting module: requests.status_codes [assertion]
      early skip of rewriting module: urllib3.contrib [assertion]
      early skip of rewriting module: urllib3.contrib.socks [assertion]
      early skip of rewriting module: socks [assertion]
      early skip of rewriting module: websocket [assertion]
      early skip of rewriting module: engineio.base_client [assertion]
      early skip of rewriting module: engineio.packet [assertion]
      early skip of rewriting module: engineio.exceptions [assertion]
      early skip of rewriting module: engineio.payload [assertion]
      early skip of rewriting module: engineio.middleware [assertion]
      early skip of rewriting module: engineio.static_files [assertion]
      early skip of rewriting module: engineio.server [assertion]
      early skip of rewriting module: engineio.base_server [assertion]
      early skip of rewriting module: gzip [assertion]
      early skip of rewriting module: engineio.socket [assertion]
      early skip of rewriting module: engineio.base_socket [assertion]
      early skip of rewriting module: engineio.async_server [assertion]
      early skip of rewriting module: engineio.async_socket [assertion]
      early skip of rewriting module: engineio.async_client [assertion]
      early skip of rewriting module: aiohttp [assertion]
      early skip of rewriting module: engineio.async_drivers [assertion]
      early skip of rewriting module: engineio.async_drivers.asgi [assertion]
      early skip of rewriting module: engineio.async_drivers.tornado [assertion]
      early skip of rewriting module: tornado [assertion]
      early skip of rewriting module: socketio.base_client [assertion]
      early skip of rewriting module: socketio.base_namespace [assertion]
      early skip of rewriting module: socketio.packet [assertion]
      early skip of rewriting module: socketio.exceptions [assertion]
      early skip of rewriting module: socketio.simple_client [assertion]
      early skip of rewriting module: socketio.manager [assertion]
      early skip of rewriting module: socketio.base_manager [assertion]
      early skip of rewriting module: bidict [assertion]
      early skip of rewriting module: bidict._abc [assertion]
      early skip of rewriting module: bidict._typing [assertion]
      early skip of rewriting module: bidict._base [assertion]
      early skip of rewriting module: bidict._dup [assertion]
      early skip of rewriting module: bidict._exc [assertion]
      early skip of rewriting module: bidict._iter [assertion]
      early skip of rewriting module: bidict._bidict [assertion]
      early skip of rewriting module: bidict._frozen [assertion]
      early skip of rewriting module: bidict._orderedbase [assertion]
      early skip of rewriting module: bidict._orderedbidict [assertion]
      early skip of rewriting module: bidict.metadata [assertion]
      early skip of rewriting module: socketio.pubsub_manager [assertion]
      early skip of rewriting module: socketio.kombu_manager [assertion]
      early skip of rewriting module: kombu [assertion]
      early skip of rewriting module: socketio.redis_manager [assertion]
      early skip of rewriting module: redis [assertion]
      early skip of rewriting module: redis.asyncio [assertion]
      early skip of rewriting module: redis.asyncio.client [assertion]
      early skip of rewriting module: redis._parsers [assertion]
      early skip of rewriting module: redis._parsers.base [assertion]
      early skip of rewriting module: redis.exceptions [assertion]
      early skip of rewriting module: redis.typing [assertion]
      early skip of rewriting module: redis._parsers.encoders [assertion]
      early skip of rewriting module: redis._parsers.socket [assertion]
      early skip of rewriting module: redis.utils [assertion]
      early skip of rewriting module: hiredis [assertion]
      early skip of rewriting module: redis._parsers.commands [assertion]
      early skip of rewriting module: redis._parsers.hiredis [assertion]
      early skip of rewriting module: redis._parsers.resp2 [assertion]
      early skip of rewriting module: redis._parsers.resp3 [assertion]
      early skip of rewriting module: redis._parsers.helpers [assertion]
      early skip of rewriting module: redis.asyncio.connection [assertion]
      early skip of rewriting module: redis.asyncio.retry [assertion]
      early skip of rewriting module: redis.backoff [assertion]
      early skip of rewriting module: redis.connection [assertion]
      early skip of rewriting module: redis.cache [assertion]
      early skip of rewriting module: redis.credentials [assertion]
      early skip of rewriting module: redis.retry [assertion]
      early skip of rewriting module: redis.asyncio.lock [assertion]
      early skip of rewriting module: redis.client [assertion]
      early skip of rewriting module: redis.commands [assertion]
      early skip of rewriting module: redis.commands.cluster [assertion]
      early skip of rewriting module: redis.crc [assertion]
      early skip of rewriting module: redis.commands.core [assertion]
      early skip of rewriting module: redis.commands.helpers [assertion]
      early skip of rewriting module: redis.commands.redismodules [assertion]
      early skip of rewriting module: redis.commands.sentinel [assertion]
      early skip of rewriting module: redis.lock [assertion]
      early skip of rewriting module: redis.asyncio.cluster [assertion]
      early skip of rewriting module: redis.cluster [assertion]
      early skip of rewriting module: redis.asyncio.sentinel [assertion]
      early skip of rewriting module: redis.asyncio.utils [assertion]
      early skip of rewriting module: redis.sentinel [assertion]
      early skip of rewriting module: socketio.kafka_manager [assertion]
      early skip of rewriting module: kafka [assertion]
      early skip of rewriting module: socketio.zmq_manager [assertion]
      early skip of rewriting module: socketio.server [assertion]
      early skip of rewriting module: socketio.base_server [assertion]
      early skip of rewriting module: socketio.namespace [assertion]
      early skip of rewriting module: socketio.middleware [assertion]
      early skip of rewriting module: socketio.tornado [assertion]
      early skip of rewriting module: engineio.async_drivers.tornado [assertion]
      early skip of rewriting module: tornado [assertion]
      early skip of rewriting module: socketio.async_client [assertion]
      early skip of rewriting module: socketio.async_simple_client [assertion]
      early skip of rewriting module: socketio.async_server [assertion]
      early skip of rewriting module: socketio.async_manager [assertion]
      early skip of rewriting module: socketio.async_namespace [assertion]
      early skip of rewriting module: socketio.async_redis_manager [assertion]
      early skip of rewriting module: socketio.async_pubsub_manager [assertion]
      early skip of rewriting module: socketio.async_aiopika_manager [assertion]
      early skip of rewriting module: aio_pika [assertion]
      early skip of rewriting module: socketio.asgi [assertion]
      early skip of rewriting module: socketio.socketio_manage [assertion]
      early skip of rewriting module: werkzeug.debug [assertion]
      early skip of rewriting module: werkzeug.debug.console [assertion]
      early skip of rewriting module: werkzeug.debug.repr [assertion]
      early skip of rewriting module: werkzeug.debug.tbtools [assertion]
      early skip of rewriting module: werkzeug._reloader [assertion]
      early skip of rewriting module: watchdog [assertion]
      early skip of rewriting module: flask_socketio.namespace [assertion]
      find_module called for: flask_socketio.test_client [assertion]
      matched test file 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\flask_socketio\\test_client.py' [assertion]
      found cached rewritten pyc for C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\.venv\Lib\site-packages\flask_socketio\test_client.py [assertion]
      early skip of rewriting module: app.routes [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: SupportTicketMapper
            obj: <class 'app.data_mappers.support_ticket_mapper.SupportTicketMapper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: mock_db_session
            obj: <function mock_db_session at 0x000001EBE8555300>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: test_get_ticket_by_id
            obj: <function test_get_ticket_by_id at 0x000001EBE873AD40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBE9AEED20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_ticket_by_id>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: test_get_tickets_by_user_id
            obj: <function test_get_tickets_by_user_id at 0x000001EBE9CBA980>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBEAF95130>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_tickets_by_user_id>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: test_create_ticket
            obj: <function test_create_ticket at 0x000001EBE9CE1260>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBE9CF1970>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_create_ticket>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: test_update_ticket
            obj: <function test_update_ticket at 0x000001EBE9CE13A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBE9AEED20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_update_ticket>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: test_delete_ticket
            obj: <function test_delete_ticket at 0x000001EBEB205C60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBEAF95130>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_delete_ticket>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: test_create_ticket_missing_fields
            obj: <function test_create_ticket_missing_fields at 0x000001EBEB205D00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBE9CF1970>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_create_ticket_missing_fields>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: test_get_ticket_db_failure
            obj: <function test_get_ticket_db_failure at 0x000001EBEB205DA0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBE9915550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_ticket_db_failure>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: test_create_ticket_db_failure
            obj: <function test_create_ticket_db_failure at 0x000001EBEB205E40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBE9CC7020>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_create_ticket_db_failure>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: test_update_ticket_invalid_id
            obj: <function test_update_ticket_invalid_id at 0x000001EBEB205EE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBEAF95130>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_update_ticket_invalid_id>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module data_mapper_test.py>
            name: test_delete_ticket_db_failure
            obj: <function test_delete_ticket_db_failure at 0x000001EBEB205F80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBE9CF1970>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_delete_ticket_db_failure>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/support_ticket/data_mapper_test.py' lenresult=10 outcome='passed'> [hook]
    genitems <Function test_get_ticket_by_id> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_ticket_by_id>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_tickets_by_user_id> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_tickets_by_user_id>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_create_ticket> [collection]
      pytest_itemcollected [hook]
          item: <Function test_create_ticket>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_update_ticket> [collection]
      pytest_itemcollected [hook]
          item: <Function test_update_ticket>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_delete_ticket> [collection]
      pytest_itemcollected [hook]
          item: <Function test_delete_ticket>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_create_ticket_missing_fields> [collection]
      pytest_itemcollected [hook]
          item: <Function test_create_ticket_missing_fields>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_ticket_db_failure> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_ticket_db_failure>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_create_ticket_db_failure> [collection]
      pytest_itemcollected [hook]
          item: <Function test_create_ticket_db_failure>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_update_ticket_invalid_id> [collection]
      pytest_itemcollected [hook]
          item: <Function test_update_ticket_invalid_id>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_delete_ticket_db_failure> [collection]
      pytest_itemcollected [hook]
          item: <Function test_delete_ticket_db_failure>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/support_ticket/data_mapper_test.py' lenresult=10 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module entity_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module entity_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module entity_test.py>
      find_module called for: tests.support_ticket.entity_test [assertion]
      matched test file 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\tests\\support_ticket\\entity_test.py' [assertion]
      found cached rewritten pyc for C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket\entity_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module entity_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module entity_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module entity_test.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\escal\\Documents\\Dinklebergs-Auction-House\\flask-server\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module entity_test.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module entity_test.py>
            name: SupportTicket
            obj: <class 'app.entities.support_ticket.SupportTicket'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module entity_test.py>
            name: test_support_ticket_creation
            obj: <function test_support_ticket_creation at 0x000001EBEB206520>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBEB1F26C0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_support_ticket_creation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module entity_test.py>
            name: test_support_ticket_with_optional_fields
            obj: <function test_support_ticket_with_optional_fields at 0x000001EBEB206660>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBEB1F2780>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_support_ticket_with_optional_fields>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module entity_test.py>
            name: test_support_ticket_to_dict
            obj: <function test_support_ticket_to_dict at 0x000001EBEB206700>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001EBEB1F2870>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_support_ticket_to_dict>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/support_ticket/entity_test.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_support_ticket_creation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_support_ticket_creation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_support_ticket_with_optional_fields> [collection]
      pytest_itemcollected [hook]
          item: <Function test_support_ticket_with_optional_fields>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_support_ticket_to_dict> [collection]
      pytest_itemcollected [hook]
          item: <Function test_support_ticket_to_dict>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/support_ticket/entity_test.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/support_ticket' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x000001EBE6B60170>
          items: [<Function test_get_ticket_by_id>, <Function test_get_tickets_by_user_id>, <Function test_create_ticket>, <Function test_update_ticket>, <Function test_delete_ticket>, <Function test_create_ticket_missing_fields>, <Function test_get_ticket_db_failure>, <Function test_create_ticket_db_failure>, <Function test_update_ticket_invalid_id>, <Function test_delete_ticket_db_failure>, <Function test_support_ticket_creation>, <Function test_support_ticket_with_optional_fields>, <Function test_support_ticket_to_dict>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x000001EBE6B60170>
            items: [<Function test_get_ticket_by_id>, <Function test_get_tickets_by_user_id>, <Function test_create_ticket>, <Function test_update_ticket>, <Function test_delete_ticket>, <Function test_create_ticket_missing_fields>, <Function test_get_ticket_db_failure>, <Function test_create_ticket_db_failure>, <Function test_update_ticket_invalid_id>, <Function test_delete_ticket_db_failure>, <Function test_support_ticket_creation>, <Function test_support_ticket_with_optional_fields>, <Function test_support_ticket_to_dict>]
            start_path: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket
            startdir: C:\Users\escal\Documents\Dinklebergs-Auction-House\flask-server\tests\support_ticket
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=13>
      pytest_runtest_protocol [hook]
          item: <Function test_get_ticket_by_id>
          nextitem: <Function test_get_tickets_by_user_id>
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_get_ticket_by_id
            location: ('tests\\support_ticket\\data_mapper_test.py', 14, 'test_get_ticket_by_id')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_ticket_by_id>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_get_ticket_by_id>>
          finish pytest_fixture_setup --> <MagicMock id='2112747706496'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_ticket_by_id>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_by_id' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_by_id' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_by_id' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_ticket_by_id>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_ticket_by_id>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_ticket_by_id>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_by_id' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_by_id' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_by_id' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_ticket_by_id>
            nextitem: <Function test_get_tickets_by_user_id>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_get_ticket_by_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_ticket_by_id>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_by_id' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_by_id' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_by_id' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_get_ticket_by_id
            location: ('tests\\support_ticket\\data_mapper_test.py', 14, 'test_get_ticket_by_id')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_tickets_by_user_id>
          nextitem: <Function test_create_ticket>
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_get_tickets_by_user_id
            location: ('tests\\support_ticket\\data_mapper_test.py', 28, 'test_get_tickets_by_user_id')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_tickets_by_user_id>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_get_tickets_by_user_id>>
          finish pytest_fixture_setup --> <MagicMock id='2112773852192'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_tickets_by_user_id>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_tickets_by_user_id' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_tickets_by_user_id' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_tickets_by_user_id' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_tickets_by_user_id>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_tickets_by_user_id>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_tickets_by_user_id>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_tickets_by_user_id' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_tickets_by_user_id' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_tickets_by_user_id' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_tickets_by_user_id>
            nextitem: <Function test_create_ticket>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_get_tickets_by_user_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_tickets_by_user_id>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_tickets_by_user_id' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_tickets_by_user_id' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_tickets_by_user_id' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_get_tickets_by_user_id
            location: ('tests\\support_ticket\\data_mapper_test.py', 28, 'test_get_tickets_by_user_id')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_create_ticket>
          nextitem: <Function test_update_ticket>
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_create_ticket
            location: ('tests\\support_ticket\\data_mapper_test.py', 50, 'test_create_ticket')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_create_ticket>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_create_ticket>>
          finish pytest_fixture_setup --> <MagicMock id='2112773895184'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_create_ticket>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_create_ticket>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_create_ticket>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_create_ticket>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_create_ticket>
            nextitem: <Function test_update_ticket>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_create_ticket>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_create_ticket>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_create_ticket
            location: ('tests\\support_ticket\\data_mapper_test.py', 50, 'test_create_ticket')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_update_ticket>
          nextitem: <Function test_delete_ticket>
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_update_ticket
            location: ('tests\\support_ticket\\data_mapper_test.py', 64, 'test_update_ticket')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_update_ticket>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_update_ticket>>
          finish pytest_fixture_setup --> <MagicMock id='2112773941792'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_update_ticket>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_update_ticket>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_update_ticket>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_update_ticket>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_update_ticket>
            nextitem: <Function test_delete_ticket>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_update_ticket>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_update_ticket>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_update_ticket
            location: ('tests\\support_ticket\\data_mapper_test.py', 64, 'test_update_ticket')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_delete_ticket>
          nextitem: <Function test_create_ticket_missing_fields>
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_delete_ticket
            location: ('tests\\support_ticket\\data_mapper_test.py', 77, 'test_delete_ticket')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_delete_ticket>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_delete_ticket>>
          finish pytest_fixture_setup --> <MagicMock id='2112774021264'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_delete_ticket>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_delete_ticket>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_delete_ticket>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_delete_ticket>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_delete_ticket>
            nextitem: <Function test_create_ticket_missing_fields>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_delete_ticket>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_delete_ticket>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_delete_ticket
            location: ('tests\\support_ticket\\data_mapper_test.py', 77, 'test_delete_ticket')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_create_ticket_missing_fields>
          nextitem: <Function test_get_ticket_db_failure>
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields
            location: ('tests\\support_ticket\\data_mapper_test.py', 85, 'test_create_ticket_missing_fields')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_create_ticket_missing_fields>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_create_ticket_missing_fields>>
          finish pytest_fixture_setup --> <MagicMock id='2112774084064'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_create_ticket_missing_fields>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_create_ticket_missing_fields>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_create_ticket_missing_fields>
        pytest_runtest_makereport [hook]
            item: <Function test_create_ticket_missing_fields>
            call: <CallInfo when='call' excinfo=<ExceptionInfo DID NOT RAISE <class 'TypeError'> tblen=37>>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_create_ticket_missing_fields>
            call: <CallInfo when='call' excinfo=<ExceptionInfo DID NOT RAISE <class 'TypeError'> tblen=37>>
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_create_ticket_missing_fields>
            nextitem: <Function test_get_ticket_db_failure>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_create_ticket_missing_fields>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_create_ticket_missing_fields>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields
            location: ('tests\\support_ticket\\data_mapper_test.py', 85, 'test_create_ticket_missing_fields')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_ticket_db_failure>
          nextitem: <Function test_create_ticket_db_failure>
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_get_ticket_db_failure
            location: ('tests\\support_ticket\\data_mapper_test.py', 100, 'test_get_ticket_db_failure')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_ticket_db_failure>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_get_ticket_db_failure>>
          finish pytest_fixture_setup --> <MagicMock id='2112774174384'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_ticket_db_failure>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_db_failure' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_db_failure' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_db_failure' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_ticket_db_failure>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_ticket_db_failure>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_ticket_db_failure>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_db_failure' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_db_failure' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_db_failure' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_ticket_db_failure>
            nextitem: <Function test_create_ticket_db_failure>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_get_ticket_db_failure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_ticket_db_failure>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_db_failure' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_db_failure' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_get_ticket_db_failure' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_get_ticket_db_failure
            location: ('tests\\support_ticket\\data_mapper_test.py', 100, 'test_get_ticket_db_failure')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_create_ticket_db_failure>
          nextitem: <Function test_update_ticket_invalid_id>
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_create_ticket_db_failure
            location: ('tests\\support_ticket\\data_mapper_test.py', 108, 'test_create_ticket_db_failure')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_create_ticket_db_failure>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_create_ticket_db_failure>>
          finish pytest_fixture_setup --> <MagicMock id='2112774571600'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_create_ticket_db_failure>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_db_failure' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_db_failure' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_db_failure' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_create_ticket_db_failure>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_create_ticket_db_failure>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_create_ticket_db_failure>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_db_failure' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_db_failure' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_db_failure' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_create_ticket_db_failure>
            nextitem: <Function test_update_ticket_invalid_id>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_create_ticket_db_failure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_create_ticket_db_failure>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_db_failure' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_db_failure' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_db_failure' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_create_ticket_db_failure
            location: ('tests\\support_ticket\\data_mapper_test.py', 108, 'test_create_ticket_db_failure')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_update_ticket_invalid_id>
          nextitem: <Function test_delete_ticket_db_failure>
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_update_ticket_invalid_id
            location: ('tests\\support_ticket\\data_mapper_test.py', 121, 'test_update_ticket_invalid_id')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_update_ticket_invalid_id>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_update_ticket_invalid_id>>
          finish pytest_fixture_setup --> <MagicMock id='2112774657408'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_update_ticket_invalid_id>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket_invalid_id' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket_invalid_id' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket_invalid_id' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_update_ticket_invalid_id>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_update_ticket_invalid_id>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_update_ticket_invalid_id>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket_invalid_id' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket_invalid_id' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket_invalid_id' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_update_ticket_invalid_id>
            nextitem: <Function test_delete_ticket_db_failure>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_update_ticket_invalid_id>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_update_ticket_invalid_id>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket_invalid_id' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket_invalid_id' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_update_ticket_invalid_id' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_update_ticket_invalid_id
            location: ('tests\\support_ticket\\data_mapper_test.py', 121, 'test_update_ticket_invalid_id')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_delete_ticket_db_failure>
          nextitem: <Function test_support_ticket_creation>
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_delete_ticket_db_failure
            location: ('tests\\support_ticket\\data_mapper_test.py', 134, 'test_delete_ticket_db_failure')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_delete_ticket_db_failure>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_delete_ticket_db_failure>>
          finish pytest_fixture_setup --> <MagicMock id='2112774667440'> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_delete_ticket_db_failure>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket_db_failure' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket_db_failure' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket_db_failure' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_delete_ticket_db_failure>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_delete_ticket_db_failure>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_delete_ticket_db_failure>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket_db_failure' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket_db_failure' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket_db_failure' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_delete_ticket_db_failure>
            nextitem: <Function test_support_ticket_creation>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_db_session' scope='function' baseid='tests/support_ticket/data_mapper_test.py'>
              request: <SubRequest 'mock_db_session' for <Function test_delete_ticket_db_failure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_delete_ticket_db_failure>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket_db_failure' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket_db_failure' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_delete_ticket_db_failure' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/data_mapper_test.py::test_delete_ticket_db_failure
            location: ('tests\\support_ticket\\data_mapper_test.py', 134, 'test_delete_ticket_db_failure')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_support_ticket_creation>
          nextitem: <Function test_support_ticket_with_optional_fields>
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/entity_test.py::test_support_ticket_creation
            location: ('tests\\support_ticket\\entity_test.py', 4, 'test_support_ticket_creation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_support_ticket_creation>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_support_ticket_creation>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_creation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_creation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_creation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_support_ticket_creation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_support_ticket_creation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_support_ticket_creation>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_creation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_creation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_creation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_support_ticket_creation>
            nextitem: <Function test_support_ticket_with_optional_fields>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_support_ticket_creation>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_creation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_creation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_creation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/entity_test.py::test_support_ticket_creation
            location: ('tests\\support_ticket\\entity_test.py', 4, 'test_support_ticket_creation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_support_ticket_with_optional_fields>
          nextitem: <Function test_support_ticket_to_dict>
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/entity_test.py::test_support_ticket_with_optional_fields
            location: ('tests\\support_ticket\\entity_test.py', 19, 'test_support_ticket_with_optional_fields')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_support_ticket_with_optional_fields>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_support_ticket_with_optional_fields>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_with_optional_fields' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_with_optional_fields' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_with_optional_fields' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_support_ticket_with_optional_fields>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_support_ticket_with_optional_fields>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_support_ticket_with_optional_fields>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_with_optional_fields' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_with_optional_fields' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_with_optional_fields' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_support_ticket_with_optional_fields>
            nextitem: <Function test_support_ticket_to_dict>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_support_ticket_with_optional_fields>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_with_optional_fields' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_with_optional_fields' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_with_optional_fields' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/entity_test.py::test_support_ticket_with_optional_fields
            location: ('tests\\support_ticket\\entity_test.py', 19, 'test_support_ticket_with_optional_fields')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_support_ticket_to_dict>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: tests/support_ticket/entity_test.py::test_support_ticket_to_dict
            location: ('tests\\support_ticket\\entity_test.py', 36, 'test_support_ticket_to_dict')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_support_ticket_to_dict>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_support_ticket_to_dict>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_to_dict' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_to_dict' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_to_dict' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_support_ticket_to_dict>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_support_ticket_to_dict>
            pytest_assertrepr_compare [hook]
                config: <_pytest.config.Config object at 0x000001EBE6B60170>
                op: ==
                left: 2025-04-27 17:30:08.180457
                right: 2024-03-18 10:00:00
            finish pytest_assertrepr_compare --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_support_ticket_to_dict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError('assert datetime.datetime(2025, 4, 27, 17, 30, 8, 180457) == datetime.datetime(2024, 3, 18, 10, 0)\n + ... at 0x000001EBEB304BC0>.created_at\n +  and   datetime.datetime(2024, 3, 18, 10, 0) = datetime(2024, 3, 18, 10, 0, 0)') tblen=35>>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_to_dict' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_to_dict' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_to_dict' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_support_ticket_to_dict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError('assert datetime.datetime(2025, 4, 27, 17, 30, 8, 180457) == datetime.datetime(2024, 3, 18, 10, 0)\n + ... at 0x000001EBEB304BC0>.created_at\n +  and   datetime.datetime(2024, 3, 18, 10, 0) = datetime(2024, 3, 18, 10, 0, 0)') tblen=35>>
            report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_to_dict' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_support_ticket_to_dict>
            nextitem: None
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_support_ticket_to_dict>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_to_dict' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_to_dict' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_to_dict' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001EBE6B60170>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/support_ticket/entity_test.py::test_support_ticket_to_dict
            location: ('tests\\support_ticket\\entity_test.py', 36, 'test_support_ticket_to_dict')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session  exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=2 testscollected=13>
        exitstatus: 1
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x000001EBE6D05F40>
          exitstatus: 1
          config: <_pytest.config.Config object at 0x000001EBE6B60170>
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments.lexers [assertion]
      early skip of rewriting module: pygments.lexers._mapping [assertion]
      early skip of rewriting module: pygments.modeline [assertion]
      early skip of rewriting module: pygments.plugin [assertion]
      early skip of rewriting module: pygments.util [assertion]
      early skip of rewriting module: pygments.lexers.python [assertion]
      early skip of rewriting module: pygments.lexer [assertion]
      early skip of rewriting module: pygments.filter [assertion]
      early skip of rewriting module: pygments.filters [assertion]
      early skip of rewriting module: pygments.token [assertion]
      early skip of rewriting module: pygments.regexopt [assertion]
      early skip of rewriting module: pygments.unistring [assertion]
      early skip of rewriting module: pygments.formatters [assertion]
      early skip of rewriting module: pygments.formatters._mapping [assertion]
      early skip of rewriting module: pygments.formatters.terminal [assertion]
      early skip of rewriting module: pygments.formatter [assertion]
      early skip of rewriting module: pygments.styles [assertion]
      early skip of rewriting module: pygments.styles._mapping [assertion]
      early skip of rewriting module: pygments.console [assertion]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/support_ticket/data_mapper_test.py::test_create_ticket_missing_fields' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x000001EBE6B60170>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/support_ticket/entity_test.py::test_support_ticket_to_dict' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x000001EBE6B60170>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x000001EBE6B60170>
    finish pytest_unconfigure --> [] [hook]
